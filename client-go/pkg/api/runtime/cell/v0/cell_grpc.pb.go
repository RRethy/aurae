// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: runtime/cell/v0/cell.proto

package cellv0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CellServiceClient is the client API for CellService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CellServiceClient interface {
	// / Reserve requested system resources for a new cell.
	// / For cells specifically this will allocate and reserve cgroup resources
	// / only.
	Allocate(ctx context.Context, in *CellServiceAllocateRequest, opts ...grpc.CallOption) (*CellServiceAllocateResponse, error)
	// / Free up previously requested resources for an existing cell
	Free(ctx context.Context, in *CellServiceFreeRequest, opts ...grpc.CallOption) (*CellServiceFreeResponse, error)
	// / Start a new Executable inside of an existing cell. Can be called
	// / in serial to start more than one executable in the same cell.
	Start(ctx context.Context, in *CellServiceStartRequest, opts ...grpc.CallOption) (*CellServiceStartResponse, error)
	// / Stop one or more Executables inside of an existing cell.
	// / Can be called in serial to stop/retry more than one executable.
	Stop(ctx context.Context, in *CellServiceStopRequest, opts ...grpc.CallOption) (*CellServiceStopResponse, error)
}

type cellServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCellServiceClient(cc grpc.ClientConnInterface) CellServiceClient {
	return &cellServiceClient{cc}
}

func (c *cellServiceClient) Allocate(ctx context.Context, in *CellServiceAllocateRequest, opts ...grpc.CallOption) (*CellServiceAllocateResponse, error) {
	out := new(CellServiceAllocateResponse)
	err := c.cc.Invoke(ctx, "/aurae.runtime.cell.v0.CellService/Allocate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellServiceClient) Free(ctx context.Context, in *CellServiceFreeRequest, opts ...grpc.CallOption) (*CellServiceFreeResponse, error) {
	out := new(CellServiceFreeResponse)
	err := c.cc.Invoke(ctx, "/aurae.runtime.cell.v0.CellService/Free", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellServiceClient) Start(ctx context.Context, in *CellServiceStartRequest, opts ...grpc.CallOption) (*CellServiceStartResponse, error) {
	out := new(CellServiceStartResponse)
	err := c.cc.Invoke(ctx, "/aurae.runtime.cell.v0.CellService/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellServiceClient) Stop(ctx context.Context, in *CellServiceStopRequest, opts ...grpc.CallOption) (*CellServiceStopResponse, error) {
	out := new(CellServiceStopResponse)
	err := c.cc.Invoke(ctx, "/aurae.runtime.cell.v0.CellService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CellServiceServer is the server API for CellService service.
// All implementations must embed UnimplementedCellServiceServer
// for forward compatibility
type CellServiceServer interface {
	// / Reserve requested system resources for a new cell.
	// / For cells specifically this will allocate and reserve cgroup resources
	// / only.
	Allocate(context.Context, *CellServiceAllocateRequest) (*CellServiceAllocateResponse, error)
	// / Free up previously requested resources for an existing cell
	Free(context.Context, *CellServiceFreeRequest) (*CellServiceFreeResponse, error)
	// / Start a new Executable inside of an existing cell. Can be called
	// / in serial to start more than one executable in the same cell.
	Start(context.Context, *CellServiceStartRequest) (*CellServiceStartResponse, error)
	// / Stop one or more Executables inside of an existing cell.
	// / Can be called in serial to stop/retry more than one executable.
	Stop(context.Context, *CellServiceStopRequest) (*CellServiceStopResponse, error)
	mustEmbedUnimplementedCellServiceServer()
}

// UnimplementedCellServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCellServiceServer struct {
}

func (UnimplementedCellServiceServer) Allocate(context.Context, *CellServiceAllocateRequest) (*CellServiceAllocateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Allocate not implemented")
}
func (UnimplementedCellServiceServer) Free(context.Context, *CellServiceFreeRequest) (*CellServiceFreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Free not implemented")
}
func (UnimplementedCellServiceServer) Start(context.Context, *CellServiceStartRequest) (*CellServiceStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedCellServiceServer) Stop(context.Context, *CellServiceStopRequest) (*CellServiceStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedCellServiceServer) mustEmbedUnimplementedCellServiceServer() {}

// UnsafeCellServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CellServiceServer will
// result in compilation errors.
type UnsafeCellServiceServer interface {
	mustEmbedUnimplementedCellServiceServer()
}

func RegisterCellServiceServer(s grpc.ServiceRegistrar, srv CellServiceServer) {
	s.RegisterService(&CellService_ServiceDesc, srv)
}

func _CellService_Allocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CellServiceAllocateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellServiceServer).Allocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aurae.runtime.cell.v0.CellService/Allocate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellServiceServer).Allocate(ctx, req.(*CellServiceAllocateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellService_Free_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CellServiceFreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellServiceServer).Free(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aurae.runtime.cell.v0.CellService/Free",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellServiceServer).Free(ctx, req.(*CellServiceFreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CellServiceStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aurae.runtime.cell.v0.CellService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellServiceServer).Start(ctx, req.(*CellServiceStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CellServiceStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aurae.runtime.cell.v0.CellService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellServiceServer).Stop(ctx, req.(*CellServiceStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CellService_ServiceDesc is the grpc.ServiceDesc for CellService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CellService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aurae.runtime.cell.v0.CellService",
	HandlerType: (*CellServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Allocate",
			Handler:    _CellService_Allocate_Handler,
		},
		{
			MethodName: "Free",
			Handler:    _CellService_Free_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _CellService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _CellService_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runtime/cell/v0/cell.proto",
}
