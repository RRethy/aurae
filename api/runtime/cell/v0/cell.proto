/* -------------------------------------------------------------------------- *\
 *             Apache 2.0 License Copyright © 2022 The Aurae Authors          *
 *                                                                            *
 *                +--------------------------------------------+              *
 *                |   █████╗ ██╗   ██╗██████╗  █████╗ ███████╗ |              *
 *                |  ██╔══██╗██║   ██║██╔══██╗██╔══██╗██╔════╝ |              *
 *                |  ███████║██║   ██║██████╔╝███████║█████╗   |              *
 *                |  ██╔══██║██║   ██║██╔══██╗██╔══██║██╔══╝   |              *
 *                |  ██║  ██║╚██████╔╝██║  ██║██║  ██║███████╗ |              *
 *                |  ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝ |              *
 *                +--------------------------------------------+              *
 *                                                                            *
 *                         Distributed Systems Runtime                        *
 *                                                                            *
 * -------------------------------------------------------------------------- *
 *                                                                            *
 *   Licensed under the Apache License, Version 2.0 (the "License");          *
 *   you may not use this file except in compliance with the License.         *
 *   You may obtain a copy of the License at                                  *
 *                                                                            *
 *       http://www.apache.org/licenses/LICENSE-2.0                           *
 *                                                                            *
 *   Unless required by applicable law or agreed to in writing, software      *
 *   distributed under the License is distributed on an "AS IS" BASIS,        *
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
 *   See the License for the specific language governing permissions and      *
 *   limitations under the License.                                           *
 *                                                                            *
\* -------------------------------------------------------------------------- */

syntax = "proto3";

package aurae.runtime.cell.v0;

option go_package = "github.com/aurae-runtime/aurae/client-go/pkg/api/runtime/cell/v0;cellv0";

/// Cells is the most fundamental isolation boundary for Aurae.
/// A cell is an isolate set of resources of the system which can be
/// used to run workloads.
///
/// A cell is composed of a unique cgroup namespace, and unshared kernel
/// namespaces.
service CellService {

  /// Reserve requested system resources for a new cell.
  /// For cells specifically this will allocate and reserve cgroup resources
  /// only.
  rpc Allocate(CellServiceAllocateRequest) returns (CellServiceAllocateResponse) {}

  /// Free up previously requested resources for an existing cell
  rpc Free(CellServiceFreeRequest) returns (CellServiceFreeResponse) {}

  /// Start a new Executable inside of an existing cell. Can be called
  /// in serial to start more than one executable in the same cell.
  rpc Start(CellServiceStartRequest) returns (CellServiceStartResponse) {}

  /// Stop one or more Executables inside of an existing cell.
  /// Can be called in serial to stop/retry more than one executable.
  rpc Stop(CellServiceStopRequest) returns (CellServiceStopResponse) {}
}

/// The most primitive workload in Aurae, a standard executable process.
message Executable {
  string name = 1;
  string command = 2;
  string description = 4;
}

/// An isolation resource used to divide a system into smaller resource
/// boundaries.
message Cell {

  /// Resource parameters for control groups (cgroups)
  /// Build on the [cgroups-rs](https://github.com/kata-containers/cgroups-rs)
  /// crate. See
  /// [examples](https://github.com/kata-containers/cgroups-rs/blob/main/tests/builder.rs)
  string name = 1;

  /// A comma-separated list of CPU IDs where the task in the control group
  /// can run. Dashes between numbers indicate ranges.
  string cpu_cpus = 2;

  ///  Cgroups can be guaranteed a minimum number of "CPU shares"
  ///  when a system is busy.  This does not limit a cgroup's CPU
  ///  usage if the CPUs are not busy.  For further information,
  ///  see Documentation/scheduler/sched-design-CFS.rst (or
  ///  Documentation/scheduler/sched-design-CFS.txt in Linux 5.2
  ///  and earlier).
  ///
  /// Weight of how much of the total CPU time should this control
  ///  group get. Note that this is hierarchical, so this is weighted
  ///  against the siblings of this control group.
  uint64 cpu_shares = 3;

  /// Same syntax as the cpus field of this structure, but applies to
  ///  memory nodes instead of processors.
  string cpu_mems = 4;

  /// In one period, how much can the tasks run in microseconds.
  int64 cpu_quota = 5;

  /// Linux namespaces to share with the calling process.
  /// If all values are set to false, the resulting cell
  /// will be as isolated as possible.
  ///
  /// Each shared namespace is a potential security risk.
  bool ns_share_mount = 10;
  bool ns_share_uts = 11;
  bool ns_share_ipc = 12;
  bool ns_share_pid = 13;
  bool ns_share_net = 14;
  bool ns_share_cgroup = 15;

}

/// An Aurae cell is a name given to Linux control groups (cgroups) that also include
/// a name, and special pre-exec functionality that is executed from within the same context
/// as any executables scheduled.
///
/// A cell must be allocated for every executable scheduled. A cell defines the resource
/// constraints of the system to allocate for an arbitrary use case.
message CellServiceAllocateRequest {

  /// A smaller resource constrained section of the system.
  Cell cell = 1;

}

/// The response after a cell has been allocated.
message CellServiceAllocateResponse {
  string cell_name = 1;

  /// A bool that will be set to true if the cgroup was created with
  /// cgroup v2 controller.
  bool cgroup_v2 = 2;
}

/// Used to remove or free a cell after it has been allocated.
message CellServiceFreeRequest { string cell_name = 1; }

/// Response after removing or freeing a cell.
message CellServiceFreeResponse {}

/// A request for starting an executable inside of a Cell.
///
/// This is the lowest level of raw executive functionality.
/// Here you can define shell commands, and meta information about the command.
/// An executable is started synchronously.
message CellServiceStartRequest {
  string cell_name = 1;
  Executable executable = 2;
}

/// The response after starting an executable within a Cell.
message CellServiceStartResponse {

  /// Return a pid as an int32 based on the pid_t type
  /// in various libc libraries.
  int32 pid = 1;

  //int32 gid = 2;     // TODO
  //int32 uid = 3;     // TODO
  //string user = 4;   // TODO
  //string group = 5;  // TODO
}

/// Request to stop an executable at runtime.
message CellServiceStopRequest {
  string cell_name = 1;
  string executable_name = 2;
}

message CellServiceStopResponse {}
